datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String    @id @default(cuid())
  userId             Int
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Group {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  enterKey String
  about    String?
  public   Boolean @default(true)


  // relational
  author    User      @relation(fields: [authorId], references: [id], name: "group-author")
  authorId  Int
  users     User[]     @relation(name: "group-enroll")
  schedules Schedule[]
  @@map(name: "groups")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String?
  username       String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String?   @unique
  image          String?
  emailVerified  DateTime?
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @updatedAt @map(name: "updated_at")
  failedAttempts Int       @default(0)


  // relational
  accounts          Account[]
  sessions          Session[]
  groupsAuthored    Group[]    @relation(name: "group-author")
  groupsEnrolled    Group[]    @relation(name: "group-enroll")
  schedulesAuthored Schedule[]
  schedulesEnrolled Schedule[] @relation(name: "schedule-enroll")
  @@map(name: "users")
}

model Schedule {
  id          Int          @id @default(autoincrement())
  type        ScheduleType @default(OTHER)
  name        String
  description String?
  link        String?
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @updatedAt @map(name: "updated_at")

  // relational
  author   User   @relation(fields: [authorId], references: [id])
  authorId Int
  group    Group  @relation(fields: [groupId], references: [id])
  groupId  Int
  users    User[] @relation("schedule-enroll")
  @@map(name: "schedules")
}

enum ScheduleType {
  LECTURE
  WEBINAR
  STUDYGROUP
  MEETING
  EVENT
  OTHER
  SPECIFIC  
}

// npx prisma studio
// npx prisma generate
// npx prisma db push
